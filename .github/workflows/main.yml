name: Build Chrome Extension

on:
  push:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 1. Checkout repository
        uses: actions/checkout@v3

      - name: 2. Read version from manifest
        id: manifest_version
        run: echo "version=$(jq -r .version manifest.json)" >> $GITHUB_OUTPUT

      - name: 3. Create build directory
        run: mkdir build

      - name: 4. Copy necessary files to build directory
        # This step MUST include ALL the files needed by the extension
        run: |
          cp manifest.json build/
          cp content.js build/
          cp styles.css build/
          cp lightweight-charts.standalone.production.js build/
          cp background.js build/
          cp icon.png build/

      - name: 5. Generate .crx file (for testing)
        run: |
          # Save the private key from GitHub Secrets to a file
          # The key must be stored in a secret named CRX_PRIVATE_KEY
          echo "${{ secrets.CRX_PRIVATE_KEY }}" > build_key.pem
          
          # Get the Chrome app ID from the key (optional, good for debugging)
          app_id=$(openssl rsa -in build_key.pem -pubout -outform DER | openssl dgst -sha256 -binary | openssl enc -base64 | tr -d '=' | tr '/+' '_-' | cut -c 1-32)
          echo "App ID: $app_id"
          
          # Pack using Google Chrome itself, which is pre-installed on GitHub runners
          google-chrome-stable --pack-extension=./build --pack-extension-key=build_key.pem
          
          # Rename the .crx file (Chrome 123+ outputs .crx, older versions outputted .pem)
          if [ -f "build.crx" ]; then
            mv build.crx "cs2-trade-extention-v${{ steps.manifest_version.outputs.version }}.crx"
            echo "Packed build.crx"
          elif [ -f "build.pem" ]; then
            # This is a fallback for older chrome pack behaviors
            mv build.pem "cs2-trade-extention-v${{ steps.manifest_version.outputs.version }}.crx"
            echo "Packed build.pem as crx"
          else
            echo "Could not find packed .crx or .pem file."
            exit 1
          fi
          
          # Clean up the private key file
          rm build_key.pem

      - name: 6. Create .zip file (for Chrome Web Store)
        run: |
          # Go into the build directory to zip its contents, not the folder itself
          cd build
          zip -r "../cs2-trade-extention-v${{ steps.manifest_version.outputs.version }}.zip" .
          cd ..
          
      - name: 7. Upload .crx Artifact (for testing)
        uses: actions/upload-artifact@v3
        with:
          name: cs2-trade-extention-crx
          path: "*.crx"
          retention-days: 7

      - name: 8. Upload .zip Artifact (for Web Store)
        uses: actions/upload-artifact@v3
        with:
          name: cs2-trade-extention-zip
          path: "*.zip"
          retention-days: 7

